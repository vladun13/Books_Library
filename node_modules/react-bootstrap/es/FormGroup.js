import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import classNames from 'classnames';
import PropTypes from 'prop-types';
import elementType from 'prop-types-extra/lib/elementType';
import React from 'react';
import FormContext from './FormContext';
import { createBootstrapComponent } from './ThemeProvider';
var propTypes = {
  /**
   * @default 'form-group'
   */
  bsPrefix: PropTypes.string,
  as: elementType,

  /**
   * Sets `id` on `<FormControl>` and `htmlFor` on `<FormGroup.Label>`.
   */
  controlId: PropTypes.string,

  /**
   * The FormGroup `ref` will be forwarded to the underlying element.
   * Unless the FormGroup is rendered `as` a composite component,
   * it will be a DOM node, when resolved.
   *
   * @type {ReactRef}
   * @alias ref
   */
  innerRef: PropTypes.any
};
var defaultProps = {
  as: 'div'
};

function FormGroup(_ref) {
  var bsPrefix = _ref.bsPrefix,
      innerRef = _ref.innerRef,
      className = _ref.className,
      children = _ref.children,
      controlId = _ref.controlId,
      Component = _ref.as,
      props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "innerRef", "className", "children", "controlId", "as"]);

  return React.createElement(FormContext.Provider, {
    value: {
      controlId: controlId
    }
  }, React.createElement(Component, _extends({}, props, {
    ref: innerRef,
    className: classNames(className, bsPrefix)
  }), children));
}

FormGroup.propTypes = propTypes;
FormGroup.defaultProps = defaultProps;
export default createBootstrapComponent(FormGroup, 'form-group');